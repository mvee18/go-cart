* Call signature:
  - go-cart <geometry file> <# go routines>? <# derivative>? <1 for slurm>?

* TODO try on benzene on eland
** DONE add slurm i/o
*** DONE add switch between pbs and slurm submission
    - some kind of interface? 
** TODO checkpoint system - resume from incomplete run
   - dump fc arrays and the index of the last job - that's all the info I have and need
** TODO big problems if jobs take more than a minute in my select statement
   - tried taking out timeout but it froze indefinitely
   - printing showed it was timing out constantly
** TODO input file with
   - geometry
   - number of concurrent jobs
   - when to write checkpoints
   - molpro job information - mainly basis set
   - follow Psi4 input style
    
* TODO switch cases to nested ifs

* TODO add mopac i/o
  
* TODO make TotalJobs an actual calculation, not a stupid loop

* TODO investigate alternate calculation schemes to minimize floating point error
  - Library/Floats.pdf

* Should first derivatives in thirds be zero?

* Should probably be using the same seed for the hashnames, look into this
  - right now just hoping they arent randomly the same?
  
* Advice from irc
  <dominikh> anyway, NumGoroutine isn't really a useful metric for avoiding
  hitting the limit. I'd just have a semaphore (easiest implemented
  as a buffered channel). acquire before spawning a goroutine,
  release when a goroutine returns, and hope things work out
    
* if I need more signals just use combinations of them
  - two signals gives 900 unique combos compared to 30 of one

* zero values below some threshold - hold off for now, see later 

* DONE check for already calculated 2nd derivatives in 4ths
  - pass around 2DE
  - build array of second derivatives - use this for fourths and duplicate seconds
    - duplicate if sorted indices already in 2DE

* DONE move force constant calculation into goroutine
  - have to pass fc arrays as argument
    
* DONE reevaluate job struct and job list -> maybe a stack of jobs
  - might get rid of job struct altogether, submit jobs as they are built?
  - pop job off to submit it?
    

* DONE Delete files after reading
  - this is back to not working since it was making too many syscalls
  - try keeping garbage list and tacking some on to every pbs job
    - hopefully deletes on compute node, saving me resources on head
    
* DONE GET RID OF DUPLICATES 1,2,1 = 2,1,1 = 112
  - done in thirds and fourths
  - tried fixing with i <= j <= k but didnt work so reverted
  - think more

* DONE likely problem with math in third derivatives/wrong ordering
  - I think emphasis on wrong ordering will reveal the math but maybe other way around
    
* DONE fix counting, probably have to use a global variable or something

* DONE option for different derivative levels
** DONE test this

* DONE THOROUGHLY RETHINK RETRIES -> I've been calling it twice if it fails to read
** Removed
  - no I havent, the qsubmit one was local and that's the only one causing trouble
  - probably just forget about it, everything should work eventually <- trying this now

* DONE figure out how higher order derivatives are written in output
  - tentatively done

* DONE experiment with no thread locking
  - I think it should help to hold a thread for reading/submitting which can run into resouce problems
    - otherwise when I sleep to wait for resources, something else will use the resources
  - but this might not be right
  - if anything take it off reading, probably more necessary for submit
      
* Maple benchmarking data for second derivatives 
  - all locks, 9 workers was fastest
  - 11 workers with read locks is fastest now
  - Working hypothesis:
    - Read locks speed it up - not sleeping while thread locked
    - Submit locks slow it down - sleeping while thread locked
    - Optimal workers is in the range [9,11]
  - differences of 28e-10 in many results throughout testing, sometimes twice that
|-----------------+--------+------------+-----------+------------+--------------|
|                 |        | Both Locks | No Locks  | Read Locks | Submit Locks |
|-----------------+--------+------------+-----------+------------+--------------|
| Trial           | Repeat | Time       | Time      | Time       | Time         |
|-----------------+--------+------------+-----------+------------+--------------|
| 2D - 16 workers |      1 | 11m13.796s |           |            |              |
|                 |      2 | 12m53.310s |           |            |              |
|                 |      3 | crash      |           |            |              |
|-----------------+--------+------------+-----------+------------+--------------|
| 2D - 12 workers |      1 | 4m23.100s  | 8m15.264s | 4m38.532s  | 11m44.230s   |
|                 |      2 | 6m18.229s  | 7m2.754s  | 4m16.705s  | 5m52.712s    |
|                 |      3 | 5m14.072s  | 6m9.490s  | 8m25.406s  | 5m2.215s     |
|-----------------+--------+------------+-----------+------------+--------------|
| 2D - 11 workers |      1 | 4m52.667s  | 4m56.138s | 4m1.981s   | 4m46.356s    |
|                 |      2 | 5m38.494s  | 5m34.129s | 3m54.353s  | 6m48.663s    |
|                 |      3 | 6m22.455s  | 4m33.178s | 4m48.952s  | 5m41.851s    |
|-----------------+--------+------------+-----------+------------+--------------|
| 2D - 10 workers |      1 | 4m26.072s  | 6m19.906s | 5m9.203s   | 5m47.458s    |
|                 |      2 | 4m28.380s  | 5m24.394s | 5m13.700s  | 5m11.124s    |
|                 |      3 | 6m28.970s  | 4m23.665s | 4m22.972s  | 5m29.700s    |
|-----------------+--------+------------+-----------+------------+--------------|
| 2D - 9 workers  |      1 | 4m45.994s  | 5m27.572s | 4m35.968s  | 5m40.977s    |
|                 |      2 | 4m41.724s  | 4m57.922s | 4m34.347s  | 5m38.867s    |
|                 |      3 | 4m40.645s  | 6m57.403s | 4m40.101s  | 5m39.927s    |
|-----------------+--------+------------+-----------+------------+--------------|
| 2D - 8 workers  |      1 | 5m7.947s   | 5m15.907s | 5m20.310s  | 6m35.837s    |
|                 |      2 | 5m7.585s   | 5m14.423s | 5m23.689s  | 6m9.979s     |
|                 |      3 | 5m7.317s   | 5m2.927s  | 5m30.961s  | 6m11.103s    |
|-----------------+--------+------------+-----------+------------+--------------|
| 2D - 4 workers  |      1 | 9m39.824s  |           |            |              |
|                 |      2 | 9m44.195s  |           |            |              |
|                 |      3 | 9m34.168s  |           |            |              |
|-----------------+--------+------------+-----------+------------+--------------|
